// code generated by pbf v4.0.1
// modified for electron-chrome-web-store

import Pbf from 'pbf'

interface AsymmetricKeyProof {
  public_key: Buffer
  signature: Buffer
}

interface CrxFileHeader {
  sha256_with_rsa: AsymmetricKeyProof[]
  sha256_with_ecdsa: AsymmetricKeyProof[]
  verified_contents?: Buffer
  signed_header_data?: Buffer
}

export function readCrxFileHeader(pbf: Pbf, end?: any): CrxFileHeader {
  return pbf.readFields(
    readCrxFileHeaderField,
    {
      sha256_with_rsa: [],
      sha256_with_ecdsa: [],
      verified_contents: undefined,
      signed_header_data: undefined,
    },
    end,
  )
}
function readCrxFileHeaderField(tag: any, obj: any, pbf: Pbf) {
  if (tag === 2) obj.sha256_with_rsa.push(readAsymmetricKeyProof(pbf, pbf.readVarint() + pbf.pos))
  else if (tag === 3)
    obj.sha256_with_ecdsa.push(readAsymmetricKeyProof(pbf, pbf.readVarint() + pbf.pos))
  else if (tag === 4) obj.verified_contents = pbf.readBytes()
  else if (tag === 10000) obj.signed_header_data = pbf.readBytes()
}

export function readAsymmetricKeyProof(pbf: Pbf, end: any) {
  return pbf.readFields(
    readAsymmetricKeyProofField,
    { public_key: undefined, signature: undefined },
    end,
  )
}
function readAsymmetricKeyProofField(tag: any, obj: any, pbf: Pbf) {
  if (tag === 1) obj.public_key = pbf.readBytes()
  else if (tag === 2) obj.signature = pbf.readBytes()
}

export function readSignedData(pbf: Pbf, end?: any): { crx_id?: Buffer } {
  return pbf.readFields(readSignedDataField, { crx_id: undefined }, end)
}
function readSignedDataField(tag: any, obj: any, pbf: Pbf) {
  if (tag === 1) obj.crx_id = pbf.readBytes()
}
